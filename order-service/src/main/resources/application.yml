spring:
    application:
        name: order-service
    datasource:
      url: jdbc:mysql://localhost:3306/order_db
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver
    jpa:
      hibernate.ddl-auto: validate
      show-sql: true
    security:
      oauth2:
        resourceserver:
          jwt:
            issuer-uri: http://localhost:8090/realms/your-realm  # Match Keycloak realm
    kafka:
      bootstrap-servers: localhost:9092
      producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add-type-headers: false  # Avoid type headers in payload

#    kafka:
#      bootstrap-servers: localhost:9092
#      consumer:
#        group-id: inventory-group
#        auto-offset-reset: earliest
#        properties:
#          spring.json.trusted.packages: "*"
#          spring.json.type.mapping: orderEvent:com.example.inventory_service.dto.OrderEvent
#

server:
  port: 8082

resilience4j.circuitbreaker:
  instances:
    orderService:
      register-health-indicator: true
      sliding-window-type: COUNT_BASED
      sliding-window-size: 10
      minimum-number-of-calls: 5
      permitted-number-of-calls-in-half-open-state: 3
      automatic-transition-from-open-to-half-open-enabled: true
      wait-duration-in-open-state: 5s
      failure-rate-threshold: 50

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus, metrics
  metrics:
    tags:
      application: ${spring.application.name}
  tracing:
    sampling:
      probability: 1.0